name: build-linux

on: [push, pull_request]

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4
        with:
            submodules: 'true'

      - name: Update submodules
        run: |
            git submodule sync --recursive
            git submodule update --init --recursive

      - name: Install basic requirements
        run: |
            sudo apt-get update
            sudo apt install build-essential cmake git
      
      - name: Install Boost
        run: |
            sudo apt install libboost-dev
            sudo apt install libboost-system-dev libboost-timer-dev libboost-mpi-dev
      
      - name: Install NetCDF-C++
        run: |
            sudo apt install libnetcdf-c++4-dev
      
      - name: Install Eigen
        run: |
            sudo apt install libeigen3-dev
      
      - name: Install CPLEX
        run: |
            export CPLEX_HOME="/opt/ibm/ILOG/CPLEX_Studio201/cplex"
      # MISSING CPLEX INSTALLATION

      - name: Install gurobi
        run: |
            wget https://packages.gurobi.com/10.0/gurobi10.0.2_linux64.tar.gz
            tar -xvf ./gurobi10.0.2_linux64.tar.gz
            mv ./gurobi1002 /opt/gurobi
            export GUROBI_HOME="/opt/gurobi/linux64"
            export PATH="${PATH}:${GUROBI_HOME}/bin"
            export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${GUROBI_HOME}/lib"
      
      - name: Install SCIP
        run: |
            sudo apt install gfortran libtbb2-dev
            curl -O https://www.scipopt.org/download/release/SCIPOptSuite-9.0.0-Linux-ubuntu22.sh
            chmod u+x SCIPOptSuite-9.0.0-Linux-ubuntu22.sh
            ./SCIPOptSuite-9.0.0-Linux-ubuntu22.sh --prefix=/opt/scip --exclude-subdir --skip-license

      - name: Install HiGHS
        run: |
            git clone https://github.com/ERGO-Code/HiGHS.git
            cd HiGHS
            mkdir build
            cd build
            cmake -DFAST_BUILD=ON -DCMAKE_INSTALL_PREFIX=/opt/HiGHS ..
            cmake --build .
            cmake --install .
            cd ..
      
      - name: Install COIN-OR CoinUtils
        run: |
            sudo apt install coinor-libcoinutils-dev
      
      - name: Install coinbrew
        run: |
            sudo apt install libbz2-dev liblapack-dev libopenblas-dev
            curl -O https://raw.githubusercontent.com/coin-or/coinbrew/master/coinbrew
            chmod u+x coinbrew
            ./coinbrew fetch Osi@master
            ./coinbrew fetch CoinUtils@master
            ./coinbrew build CoinUtils --latest-release \
                --skip-dependencies \
                --prefix=/opt/coin-or \
                --tests=none
      
      - name: Install COIN-OR OSI/CLP
        run: |
            sudo apt install coinor-libclp-dev coinor-libosi-dev
            CPLEX_DIR=$CPLEX_HOME
            CPLEX_LIB_DIR=`ls -bd1 $CPLEX_DIR/cplex/lib/*/static_pic | tail -n1`
            GUROBI_DIR=$GUROBI_HOME
            GUROBI_LIB_DIR=`ls -bd1 $GUROBI_DIR/*/lib | tail -n1`
            GUROBI_INCLUDE_DIR=`ls -bd1 $GUROBI_DIR/*/include | tail -n1`
            ./coinbrew build Osi --latest-release \
                --skip-dependencies \
                --prefix=/opt/coin-or \
                --tests=none \
                --without-cplex \
                --with-gurobi \
                --with-gurobi-lib="-L$GUROBI_LIB_DIR -lgurobi100" \
                --with-gurobi-incdir="$GUROBI_INCLUDE_DIR"
            ./coinbrew build Clp --latest-release \
                --skip-dependencies \
                --prefix=/opt/coin-or \
                --tests=none
            

          # --with-cplex \
          # --with-cplex-lib="-L$CPLEX_LIB_DIR -lcplex -lpthread -lm -ldl" \
          # --with-cplex-incdir="$CPLEX_DIR/cplex/include/ilcplex" \
      
      - name: Install StOpt
        run: |
          sudo apt install libstopt5 libstopt-dev
      
      - name: Compile SMSpp
        run: |
          cd smspp-project
          mkdir build
          cmake ..
          cmake --build . --config Release
          cmake --install .

#       - name: Configure CMake
#         shell: bash
#         working-directory: ${{runner.workspace}}/build
#         run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Debug -DFAST_BUILD=OFF

#       - name: Build
#         working-directory: ${{runner.workspace}}/build
#         shell: bash
#         # Execute the build.  You can specify a specific target with "--target <NAME>"
#         run: |
#           cmake --build . --parallel --config Debug

#       - name: Test
#         working-directory: ${{runner.workspace}}/build
#         shell: bash
#         # Execute tests defined by the CMake configuration.
#         # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#         run: ctest --parallel 2 --timeout 300 --output-on-failure 

#   release:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         os: [ubuntu-latest]

#     steps:
#       - uses: actions/checkout@v4

#       - name: Create Build Environment
#         run: cmake -E make_directory ${{runner.workspace}}/build

#       - name: Configure CMake
#         shell: bash
#         working-directory: ${{runner.workspace}}/build
#         run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release -DFAST_BUILD=OFF

#       - name: Build
#         working-directory: ${{runner.workspace}}/build
#         shell: bash
#         # Execute the build.  You can specify a specific target with "--target <NAME>"
#         run: |
#           cmake --build . --parallel --config Release

#       - name: Test
#         working-directory: ${{runner.workspace}}/build
#         shell: bash
#         # Execute tests defined by the CMake configuration.
#         # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#         run: ctest --parallel 2 --timeout 300 --output-on-failure -C Release